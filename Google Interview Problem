on which day he should work so it maximized his distance travelled by end of trip

#include<iostream>
#include<queue>
using namespace std;
//brute force
int main()
{
    // int n;
    // cin>>n;
    // int A[n];
    // for(int i=0;i<n;i++)
    // {
    //   cin>>A[i]; 
    // }
    // int k;
    // cin>>k;
    int A[7]={10,20,0,30,5,0,10};
    int k=3,i=0,j=0,k1=3,sum=0;
    priority_queue<pair<int,int>>pq;
    while(j<7 && i<7)
    {
        if( k1==0)
        {
            k1++;
        }
        else if(A[i]!=0)
        {
            sum+=A[j]; 
            k1--;
        }
        j++;
        if(j==7)
        {
            pq.push(make_pair(sum,i));
            i++;
            j=i;
            sum=0;
            k1=k;
        }
    }
    cout<<pq.top().second+1;
    return 0;
}


//greedy
#include<iostream>
#include<queue>
#include<algorithm>
using namespace std;

int main()
{
    int A[7]={10,20,0,30,5,0,10};
    int k=3;
    
    priority_queue<pair<int,int>>pq;
    for(int i=0;i<7;i++)
    {
        pq.push(make_pair(A[i],i));
    }
    
    vector<int>ans;
    while(!pq.empty())
    {
        int a=pq.top().first;
        int b=pq.top().second;
        if(k>0)
        {
           ans.push_back(b);
           k--;
        }
        pq.pop();
    }
    sort(ans.begin(),ans.end());
    for(int i=0;i<ans.size();i++)
    {
     cout<<ans[i]<<" ";
    }
    return 0;
}


//recursion
#include<iostream>
#include<queue>
#include<algorithm>
using namespace std;

void solve(vector<int>B ,priority_queue<pair<int,int>>& pq,vector<int>a,int k,int sum,int i)
{
    
   if(i>=7 || k<0)
   {
       return;
   }
   if(k==0)
   {
       sort(a.begin(),a.end());
       pq.push(make_pair(sum,a[0]));
       return;
   }
    
        //incl
         a.push_back(i);
         solve(B,pq,a,k-1,sum+B[i],i+1);
         a.pop_back();
    
        //excl
        solve(B,pq,a,k+1,sum,i+1);
}
int main()
{
    int A[7]={10,20,0,30,5,0,10};
    int k=3;
    
    vector<int>B;
    for(int i=0;i<7;i++)
    {
        if(A[i]!=0){
            B.push_back(A[i]);
        }
    }
    priority_queue<pair<int,int>>pq;
    vector<int>a;
    
    solve(B,pq,a,k,0,0);
    
    
    cout<<pq.top().second+1<<" day";
  
    return 0;
}
