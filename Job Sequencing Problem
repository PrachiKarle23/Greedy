class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool cmp(Job a,Job b)
    {
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,cmp);

        int maxiDeadline=INT_MIN;
        for(int i=0;i<n;i++)
        {
            maxiDeadline=max(maxiDeadline,arr[i].dead);
        }
        
        vector<int>schedule(maxiDeadline+1,-1);
        
        int maxProfit=0,count=0;
        for(int i=0;i<n;i++)
        {
            int currProfit=arr[i].profit;
            int currDead=arr[i].dead;
            int currId=arr[i].id;
            
            for(int k=currDead;k>0;k--)
            {
                if(schedule[k]==-1)
                {
                    schedule[k]=currId;
                    maxProfit+=currProfit;
                    count++;
                    break;
                }
            }
        }
        vector<int>ans;
        ans.push_back(count);
        ans.push_back(maxProfit);
        return ans;
    } 
};




#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


static bool cmp(pair<int,pair<int,int>>& p1,
pair<int,pair<int,int>>&p2)
{
    return p1.second.second>p2.second.second;
}

int jobsequencing(vector<int> id,vector<int>deadline,
vector<int>profit,int n,int maxiDeadline)
{
    vector<int>job;
    vector<pair<int,pair<int,int>>>p;
    for(int i=0;i<n;i++)
    {
        pair<int,int>p1=make_pair(deadline[i],profit[i]);
        p.push_back(make_pair(id[i],p1));
    }
    sort(p.begin(),p.end(),cmp);
    
    int maxProfit=0;
    vector<int>slot(maxiDeadline+1,-1);
    
    for(int i=0;i<p.size();i++)
    {
        int d=p[i].second.first;
        for(int k=d;k>0;k--)
        {
            if(slot[k]==-1){
                slot[k]=p[i].first;
                job.push_back(p[i].first);
                maxProfit+=p[i].second.second;
                break;
            }
        }
    }
    
    for(int i=0;i<job.size();i++)
    {
        cout<<job[i]<<" ";
    }
    cout<<endl;
    return maxProfit;
}
int main() {
    vector<int>id={1,2,3,4};
    vector<int>deadline={4,1,1,1};
    vector<int>profit={20,10,40,30};
int maxiDeadline=*max_element(deadline.begin(),deadline.end());
    
    cout<< jobsequencing(id,deadline,profit,4,maxiDeadline);
    
    
    return 0;
}
