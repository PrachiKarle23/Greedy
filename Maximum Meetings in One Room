class Solution{
public:
    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        vector<int>ans;
        vector<pair<int,int>>v;
        for(int i=0;i<N;i++){
            pair<int,int>p=make_pair(F[i],i);
            v.push_back(p);
        }
        
        sort(v.begin(),v.end());
        
        ans.push_back(v[0].second+1);
        int endTime=v[0].first;
        for(int i=1;i<N;i++)
        {
           if(S[v[i].second]>endTime){
               ans.push_back(v[i].second+1);
               endTime=v[i].first;
           }
        }
        sort(ans.begin(),ans.end());
        return ans;
        
    }
};


class Solution{
public:
    static bool cmp(pair<int,pair<int,int>>& p1,pair<int,pair<int,int>>& p2)
    {
        return p1.second.second<p2.second.second;
    }
    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        
        vector<int>ans;
        
        vector<pair<int,pair<int,int>>>p;
        for(int i=0;i<N;i++)
        {
          pair<int,int>p1=make_pair(S[i],F[i]);
          p.push_back(make_pair(i,p1));  
        }
        
        sort(p.begin(),p.end(),cmp);
        
      
        int endTime=p[0].second.second;
        ans.push_back(p[0].first+1);
        
        for(int i=1;i<p.size();i++)
        {
            if(p[i].second.first>endTime)
            {
                ans.push_back(p[i].first+1);
                endTime=p[i].second.second;
            }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};
