class Solution {
  public:
    // Function to get the maximum total value in the knapsack.
    static bool cmp(pair<double,Item>p1,pair<double,Item>p2)
    {
        return p1.first>p2.first;
    }
    double fractionalKnapsack(int w, Item arr[], int n) {
       vector<pair<double,Item>>p;
       
       for(int i=0;i<n;i++){
           int val=arr[i].value;
           int wt=arr[i].weight;
           double ratio=1.0* val/wt;
           pair<double,Item>s=make_pair(ratio,arr[i]);
           p.push_back(s);
       }
       sort(p.begin(),p.end(),cmp);
       
       double totalval=0;
       
       for(int i=0;i<n;i++)
       {
           if(p[i].second.weight>w)
           {
               totalval+=w*p[i].first;
               w=0;
           }
           else{
               totalval+=p[i].second.value;
               w-=p[i].second.weight;
           }
       }
       return totalval;
    }
};




#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

static bool cmp(pair<int,pair<int,int>>& p1,pair<int,pair<int,int>>& p2)
{
    return p1.first>p2.first;
}


int fractionalKSP(int profit[],int wt[],int W)
{
    vector<pair<int,pair<int,int>>>p;
    for(int i=0;i<3;i++)
    {
        int val=profit[i];
        int w=wt[i];
        int ratio= val/w;
        
        p.push_back(make_pair(ratio,make_pair(val,w)));
    }
    int totalval=0;
    sort(p.begin(),p.end(),cmp);
    
  
    for(int i=0;i<3;i++)
       {
           if(p[i].second.second>W)
           {
               totalval+=W*p[i].first;
               W=0;
           }
           else{
               totalval+=p[i].second.first;
               W-=p[i].second.second;
           }
       }
    return totalval;
}
int main() {
    int W=50;
    int profit[3]={60,100,120};
    int wt[3]={10,20,30};
    
    cout<<fractionalKSP(profit,wt,W);
    return 0;
}
