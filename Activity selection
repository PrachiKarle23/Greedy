class Solution
{
    public:
    //Function to find the maximum number of activities that can
    //be performed by a single person.
    static bool cmp(pair<int,int>p1,pair<int,int>p2)
    {
        return p1.second<p2.second;
    }
    int activitySelection(vector<int> start, vector<int> end, int n)
    {
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            v.push_back(make_pair(start[i],end[i]));
        }
        sort(v.begin(),v.end(),cmp);
        
        int count=1;
        int endTime=v[0].second;
        for(int i=1;i<v.size();i++)
        {
            if(v[i].first>endTime)
            {
                count++;
                endTime=v[i].second;
            }
        }
        
        return count;
        
    }
};



#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

static bool cmp(pair<int,int>& p1,pair<int,int>& p2)
{
    return p1.second<p2.second;
}

int activitySelection(int start[],int finish[],int n)
{
    vector<pair<int,int>>p;
    for(int i=0;i<n;i++)
    {
        p.push_back(make_pair(start[i],finish[i]));
    }
    
    sort(p.begin(),p.end(),cmp);
    
    int count=1;
    int endTime=p[0].second;
    for(int i=1;i<p.size();i++)
    {
        if(p[i].first>endTime)
        {
            count++;
            endTime=p[i].second;
        }
    }
    
    return count;
}
int main() {
    // int start[3]={10,12,20};
    // int finish[3]={20,25,30};
    int start[6]={1,3,0,5,8,5};
    int finish[6]={2,4,6,7,9,9};
    cout<<activitySelection(start,finish,6);
    return 0;
}
